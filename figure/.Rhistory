}
makeVector(3)
m1 <- matrix(1:4)
m1
m1 <- matrix(1:4, 2)
m1
solve(m1)
m1 <- matrix(c(1,3,2,4), 2)
m1
solve(m1)
m2 <- matrix(c(1,0,1,2,4,0,3,5,6), 3)
m2
solve(m2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(5)
makeVector()
makeVector(5)
cachemean(5)
makeVector(3:10)
cachemean(3:10)
makeVector()
cachemean()
cachemean(numeric())
inverse <- function(x) {
solve(x)
}
inverse(matrix(1:4,2))
inverse(m1)
inverse(m2)
inverse <- function(m) {
solve(m)
}
inverse(m1)
vec <- c(1,2,3,4)
mv <- makeVector(vec)
mv
cachemean(vec)
cachemean(makeVector)
cachemean(makeVector,vec)
cachemean(vec, makeVector)
mv <- makeVector(vec)
cachemean(mv)
cachemean(makeVector(vec))
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
a$get()
a$setmean(0)
a$getmean()
a$get()
cachemean(a)
a <- makeVector(c(5,25,125,625))
a$get()
cachemean(a)
cachemean(a)
crazy <- function() {
x <<- 3.14                   # variable x in the containing environment (global in this case) is updated to be 3.14
print(x)                        # since no local variable 'x' exists within function 'crazy' R searches the containing environments
{ print(x);                     # this is to demonstrate the function, not a code block, is the smallest environment in R
x <- 42; print(x)         # local variable 'x' is declared (created) and assigned the value 42; overrides the variable 'x' in
}                                  # the containing environment
print(x)                       # since local variable 'x' now exists within the function there is no need to search the containing
}                                   # environment (global in this case)
x <- 0
crazy()
x
crazy2 <- function() {
x <- 42
x <<- 3.14
print(x)
}
x <- 0
x
crazy2()
x
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
a$get()
a$setmean(0)
a$getmean()
a$get()
cachemean(a)
a <- makeVector(c(5,25,125,625))
a$get()
cachemean(a)
cachemean(a)
library(SDSFoundations)
read.csv(bullriders.csv)
bull <- BullRiders
View(bull)
plot(bull$YearsPro,bull$BuckOuts,xlab="Years Pro",ylab="Buck Outs",main="Plot of Years Pro vs. Buck Outs")
abline(lm(bull$BuckOuts~bull$YearsPro))
plot(bull$Events,bull$BuckOuts,xlab="Events",ylab="Buck Outs",main="Plot of Events vs. Buck Outs")
abline(lm(bull$BuckOuts~bull$Events))
cor(bull$YearsPro,bull$BuckOuts)
cor(bull$BuckOuts,bull$YearsPro)
cor(bull$Events,bull$BuckOuts)
corvec <- c("Years Pro", "Events", "Buck Outs"")
cor(bull[,corvec])
corvec <- c("YearsPro", "Events", "BuckOuts"")
cor(bull[,corvec])
corvec <- c("YearsPro", "Events", "BuckOuts"")
corvec <- c("YearsPro", "Events", "BuckOuts")
cor(bull[,corvec])
View(bull)
str(bull)
summary(bull)
plot(bull$RidePer,bull$TopTen,xlab="Ride %",ylab="Top 10 Finishes",main="Plot of Ride % vs. Top 10s")
abline(lm(bull$TopTen~bull$RidePer))
plot(bull$RidePer,bull$Top10,xlab="Ride %",ylab="Top 10 Finishes",main="Plot of Ride % vs. Top 10s")
abline(lm(bull$Top10~bull$RidePer))
cor(bull$RidePer,bull$Top10)
corvec <- c("RidePer", "Top10")
vars <- c("RidePer", "Top10")
vars <- c("Top10", "RidePer")
cor(bull[vars])
cor(bull)
cor(bull[,])
hist(bull$RidePer)
fivenum(bull$RidePer)
mean(bull$RidePer)
sd(bull$RidePer)
hist(bull$Top10)
fivenum(bull$Top10)
mean(bull$Top10)
sd(bull$Top10)
hist(bull$RidePer)
which(bull$Top10==5 & bull$RidePer==.53)
bull[16,]
library(SDSFoundations)
bull <- BullRiders
View(bull)
hist(bull$Earnings)
fivenum(bull$Earnings)
mean(bull$Earnings)
sd(bull$Earnings)
plot(bull$RidePer,bull$Earnings,xlab="Ride %",ylab="Earnings",main="Earnings vs. Ride %")
plot(bull$Earnings,bull$RidePer,ylab="Ride %",xlab="Earnings",main="Earnings vs. Ride %")
bullvars <- c("Earnings", "RidePer", "CupPoints")
cor(bull[,bullvars])
plot(bull$CupPoints,bull$Earnings,xlab="Cup Points",ylab="Earnings",main="Earnings vs. Ride %")
plot(bull$CupPoints,bull$Earnings,xlab="Cup Points",ylab="Earnings",main="Earnings vs. Cup Points")
which(bull$Earnings == max(bull$Earnings))
bull[1,]
bull[which(bull$Earnings == max(bull$Earnings)),]
nooutlierbull <- bull[-1,]
View(nooutlierbull)
nooutlierbull <- bull[-3,]
View(nooutlierbull)
nooutlierbull <- bull[-1,]
View(nooutlierbull)
cor(nooutlierbull[,bullvars])
plot(nooutlierbull$RidePer,nooutlierbull$Earnings,xlab="Ride %",ylab="Earnings",main="Earnings vs. Ride %, no outlier")
plot(nooutlierbull$CupPoints,nooutlierbull$Earnings,xlab="Cup Points",ylab="Earnings",main="Earnings vs. Cup Points, no outlier")
cor(bull[,bullvars])
bull$RidesPerEvent <- bull$Rides/bull$Events
bull$RidesPerEvent
hist(bull$RidesPerEvent)
fivenum(bull$RidesPerEvent)
plot(bull$RidesPerEvent,bull$Place,xlab="Rides Per Event",ylab="Yearly Ranking (Place)",main="Rides Per Event vs. Yearly Ranking (Place)")
abline(lm(bull$place~bull$RidesPerEvent))
abline(lm(bull$Place~bull$RidesPerEvent))
cor(bull$RidesPerEvent,bull$Place)
.75*.75
1-(.75*.75)
studytime <- c(30,45,180,95,130,140,30,80,60,110,0,80)
length(studytime)
examgrade <- c(74,68,87,90,94,84,92,88,82,93,65,90)
length(examgrade)
cbind(studytime,examgrade)
examchart <- cbind(studytime,examgrade)
View(examchart)
cor(studytime,examgrade)
?sq
?square
3^2
2^3
cor(studytime,examgrade)^2
(cor(studytime,examgrade))^2
plot(studytime,examgrade)
plot(studytime,examgrade,main="Exam Grades vs. Study Time")
View(examchart)
studytime2 <- studytime[-7]
studytime2
View(examchart)
examgrade2 <- examgrade[-7]
examgrade2
cor(studytime2,examgrade2)
q()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flagcolors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summar(plants)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),replace=TRUE,prob=(c(.3,.7)))
flips <- sample(c(0,1),100, replace=TRUE,prob=(c(.3,.7)))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob =0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100,rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
q()
?rnorm
abs(c(-5,3,0))
set1 <- abs(rnorm(100,10,3))
?system.time
system.time(set1 <- abs(rnorm(100,10,3)))
set1 <- abs(rnorm(1000,10,3))
system.time(set1 <- abs(rnorm(1000,10,3)))
system.time(set1 <- abs(rnorm(10000,10,3)))
system.time(set1 <- abs(rnorm(100000,10,3)))
system.time(set1 <- abs(rnorm(1000000,10,3)))
head(set1)
set1 <- abs(rnorm(1000,10,3))
set.seed(1)
set1 <- abs(rnorm(1000,10,3))
set1 <- abs(rnorm(1000,10,3))
set.seed(1)
set1 <- abs(rnorm(1000,10,3))
str(set1)
hist(set1)
set2 <- abs(rnorm(1000,10,3))
set3 <- abs(rnorm(1000,10,3))
set4 <- abs(rnorm(1000,10,3))
hist(set2)
hist(set3)
hist(set4)
set5 <- abs(rnorm(1000,10,3))
set6 <- abs(rnorm(1000,10,3))
set7 <- abs(rnorm(1000,10,3))
set8 <- abs(rnorm(1000,10,3))
set9 <- abs(rnorm(1000,10,3))
set10 <- abs(rnorm(1000,10,3))
hist(set5)
hist(set6)
hist(set7)
hist(set8)
hist(set9)
hist(set10)
str(set1)
summary(set1)
matrix(min(set1), median(set1), mean(set1), max(set1))
matrix(c(min(set1), median(set1), mean(set1), max(set1)))
matrix(c(min(set1), median(set1), mean(set1), max(set1)),1,4)
setinfotest <- matrix(c(min(set1), median(set1), mean(set1), max(set1)),1,4)
?colnames
colnames(setinfotest) <- c("Min", "Median", "Mean", "Max")
setinfotest
function(set) {
setinfo <- matrix(min(set), median(set), mean(set), max(set))
colnames(setinfo) <- c("Min", "Median", "Mean", "Max")
centeredness <- 1/abs(mean(set)-median(set))
print(setinfo)
print(centeredness)
}
set_analysis <- function(set) {
setinfo <- matrix(min(set), median(set), mean(set), max(set))
colnames(setinfo) <- c("Min", "Median", "Mean", "Max")
centeredness <- 1/abs(mean(set)-median(set))
print(setinfo)
print(centeredness)
}
set_analysis(set1)
set_analysis <- function(set) {
setinfo <- matrix(c(min(set), median(set), mean(set), max(set)),1,4)
colnames(setinfo) <- c("Min", "Median", "Mean", "Max")
centeredness <- 1/abs(mean(set)-median(set))
print(setinfo)
print(centeredness)
}
set_analysis(set1)
set_analysis <- function(set) {
setinfo <- matrix(c(min(set), median(set), mean(set), max(set)),1,4)
centeredness <- abs(mean(set)-median(set))
setinfo <- cbind(setinfo, centeredness)
colnames(setinfo) <- c("Min", "Median", "Mean", "Max", "Centeredness")
print(setinfo)
}
set_analysis(set1)
set_analysis(set2)
center_compare <- function(set) {
fullset <- matrix()
for (i in set){
fullset <- rbind(fullset,i)
}
center_data <- c()
for(i in 1:10) {
centeredness <- abs(mean(fullset[i,])-median(fullset[i,]))
center_data <- c(center_data, centeredness)
}
print(center_data)
}
center_compare(c(set1,set2,set3,set4,set5,set6,set7,set8,set9,set10))
center_compare <- function(set) {
fullset <- matrix()
for (i in set){
fullset <- rbind(fullset,i)
}
}
center_compare(c(set1,set2,set3,set4,set5,set6,set7,set8,set9,set10))
center_compare <- function(set) {
fullset <- matrix()
for (i in set){
fullset <- rbind(fullset,i)
}
head(fullset)
}
center_compare(c(set1,set2,set3,set4,set5,set6,set7,set8,set9,set10))
head(matrix(set1,1,1000))
center_compare <- function(set) {
fullset <- matrix()
for (i in set) {
set_as_matrix <- matrix(i,1,1000)
fullset <- rbind(fullset, set_as_matrix)
}
head(fullset)
}
center_compare(c(set1,set2,set3,set4,set5,set6,set7,set8,set9,set10))
center_compare <- function(set) {
fullset <- matrix(,1,1000)
for (i in set) {
set_as_matrix <- matrix(i,1,1000)
fullset <- rbind(fullset, set_as_matrix)
}
head(fullset)
}
center_compare(c(set1,set2,set3,set4,set5,set6,set7,set8,set9,set10))
emptymatrix <- matrix(,1,1000)
fullmatrix <- rbind(emptymatrix, matrix(set1,1,1000))
head(fullmatrix)
str(fullmatrix)
?dataframe
?data.frame
data.frame(set1,1,1000)
testdf <- data.frame(set1,1,1000)
testdf
View(testdf)
testdf <- data.frame(matrixset1,1,1000))
testdf <- data.frame(matrix(set1,1,1000))
head(testdf)
View(testdf)
testfullset <- data.frame()
testbind <- rbind(testfullset, testdf)
str(testbind)
View(testbind)
summary(testbind)
center_compare <- function(set) {
fullset <- data.frame()
for (i in set) {
fullset <- cbind(fullset, i)
}
head(fullset)
}
center_compare(c(set1,set2,set3,set4,set5,set6,set7,set8,set9,set10))
?par
colors()
?devices
?Devices
dev.cur()
?object.size
q()
setwd("~/DataSci/Data-sci-coursework/Course-4-Exploratory/Projects/Project-1/exdata-data-household_power_consumption")
dir()
library(data.table)  ## load data.table package to use fread function
powerdata <- fread("household_power_consumption.txt")  ## use fread to read in file
powerdatafebpull <- powerdata[which(powerdata$Date == "1/2/2007" | powerdata$Date == "2/2/2007"),]
class(powerdatafebpull) <- "data.frame"
powerdatafebpull$Date <- as.Date(powerdatafebpull$Date, format = "%d/%m/%Y")
Date.Time <- paste(powerdatafebpull$Date, powerdatafebpull$Time)
Date.Time <- strptime(Date.Time, format = "%Y-%m-%d %H:%M:%S")
powerdatafeb <- cbind(Date.Time, powerdatafebpull)[,c(1,4:10)]
for (i in 2:8) {
class(powerdatafeb[,i]) <- "numeric"
}
str(powerdatafeb) # check classes - should be POSIXct first and the rest num
png(filename = "plot1.png", width = 480, height = 480)
hist(powerdatafeb$Global_active_power, col = "red", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
dev.off()
setwd("~/DataSci/Data-sci-coursework/Course-4-Exploratory/Projects/Project-1")
setwd("~/DataSci/Data-sci-coursework/Course-4-Exploratory/Projects/Project-1/DataPlotting/ExData_Plotting1/figure")
png(filename = "plot1.png", width = 480, height = 480)
hist(powerdatafeb$Global_active_power, col = "red", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
dev.off()
png(filename = "plot2.png", width = 480, height = 480)
with(powerdatafeb, plot(Date.Time, Global_active_power, type = "l",
ylab = "Global Active Power (kilowatts)", xlab = ""))
dev.off()
png(filename = "plot3.png", width = 480, height = 480)
with(powerdatafeb, plot(Date.Time, Sub_metering_1, type = "l",
ylab = "Energy sub metering", xlab = ""))
with(powerdatafeb, lines(Date.Time, Sub_metering_2, col = "red"))
with(powerdatafeb, lines(Date.Time, Sub_metering_3, col = "blue"))
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
png(filename = "plot4.png", width = 480, height = 480)
par(mfrow = c(2, 2))
with(powerdatafeb, {
plot(Date.Time, Global_active_power, type = "l",
ylab = "Global Active Power", xlab = "")
plot(Date.Time, Voltage, type = "l",
ylab = "Voltage", xlab = "datetime")
plot(Date.Time, Sub_metering_1, type = "l",
ylab = "Energy sub metering", xlab = "")
lines(Date.Time, Sub_metering_2, col = "red")
lines(Date.Time, Sub_metering_3, col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Date.Time, Global_reactive_power, type = "l",
ylab = "Global_reactive_power", xlab = "datetime")
})
dev.off()
